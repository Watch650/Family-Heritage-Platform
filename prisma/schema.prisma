// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  accounts Account[]
  sessions Session[]
  persons  Person[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id         String    @id @default(cuid())
  firstName  String
  lastName   String?
  middleName String?
  birthDate  DateTime?
  deathDate  DateTime?
  birthPlace String?
  biography  String?   @db.Text
  photoPath  String?
  gender     Gender?
  isAlive    Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Foreign keys
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  // Relationships
  relationshipsAsOne Relationship[] @relation("PersonOne")
  relationshipsAsTwo Relationship[] @relation("PersonTwo")

  @@map("persons")
}

model Relationship {
  id        String           @id @default(cuid())
  type      RelationshipType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  personOneId String
  personTwoId String

  personOne Person @relation("PersonOne", fields: [personOneId], references: [id], onDelete: Cascade)
  personTwo Person @relation("PersonTwo", fields: [personTwoId], references: [id], onDelete: Cascade)

  @@unique([personOneId, personTwoId, type])
  @@map("relationships")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RelationshipType {
  PARENT
  MARRIED
}
